#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void rozpoznajKomendy(char *komendy) {
    char *token;
    const char delimiters[] = " ,";
    
    // Dzieli wejsciowy ciag na slowa przy uzyciu strtok
    token = strtok(komendy, delimiters);

    while (token != NULL) {
        // Sprawdza, czy slowo to foward, backward, right, left
        if (strcmp(token, "forward") == 0) {
            printf("Wykryto komende: Forward\n");

            // Jesli jest dostepne kolejne slowo, to jest traktowane jako wartosc
            token = strtok(NULL, delimiters);
            if (token != NULL) {
                int value = atoi(token);
                printf("Wartosc: %d\n", value);
            }
        } else if (strcmp(token, "backward") == 0) {
            printf("Wykryto komende: Backward\n");

            token = strtok(NULL, delimiters);
            if (token != NULL) {
                int value = atoi(token);
                printf("Wartosc: %d\n", value);
            }
        } else if (strcmp(token, "right") == 0) {
            printf("Wykryto komende: Right\n");
        } else if (strcmp(token, "left") == 0) {
            printf("Wykryto komende: Left\n");
        }

        // Pobiera kolejne slowo
        token = strtok(NULL, delimiters);
    }
}

int main() {
    // Przykladowe uzycie funkcji
    char komendy[] = "forward100, backward50, right, left";
    rozpoznajKomendy(komendy);

    return 0;
}


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void rozpoznajKomendy(char *komendy) {
    const char delimiters[] = " ,";
    char *token;

    // Petla dziala dopóki w ciagu sa jeszcze slowa
    while ((token = strtok(komendy, delimiters)) != NULL) {
        // Sprawdza, czy slowo to forward, backward, right, left
        if (strcmp(token, "forward") == 0) {
            printf("Wykryto komende: Forward\n");

            // Jesli jest dostepne kolejne slowo, to jest traktowane jako wartosc
            token = strtok(NULL, delimiters);
            if (token != NULL) {
                int value = atoi(token);
                printf("Wartosc: %d\n", value);
            }
        } else if (strcmp(token, "backward") == 0) {
            printf("Wykryto komende: Backward\n");

            // Jesli jest dostepne kolejne slowo, to jest traktowane jako wartosc
            token = strtok(NULL, delimiters);
            if (token != NULL) {
                int value = atoi(token);
                printf("Wartosc: %d\n", value);
            }
        } else if (strcmp(token, "right") == 0) {
            printf("Wykryto komende: Right\n");
        } else if (strcmp(token, "left") == 0) {
            printf("Wykryto komende: Left\n");
        }

        // Usuwa przetworzone slowo z ciagu
        memmove(komendy, komendy + strlen(token) + 1, strlen(komendy) - strlen(token));

        // Pobiera kolejne slowo
        token = strtok(NULL, delimiters);
    }
}

int main() {
    // Przykladowe uzycie funkcji
    char komendy[] = "forward50leftforward30rightbackward";
    
    // Petla dziala dopóki ciag nie jest pusty
    while (strlen(komendy) > 0) {
        rozpoznajKomendy(komendy);
    }

    return 0;
}

void rozpoznajKomendy(char *komendy) {
    const char delimiters[] = ",";
    char *token;
    char *rest = komendy;

    // Dzieli wejsciowy ciag na slowa przy uzyciu strtok
    while ((token = strtok_r(rest, delimiters, &rest))) {
        // Sprawdza, czy slowo to forward, backward, right, left
        if (strcmp(token, "forward") == 0) {
            printf("Wykryto komende: Forward\n");

            // Jesli jest dostepne kolejne slowo, to jest traktowane jako wartosc
            token = strtok_r(rest, delimiters, &rest);
            if (token != NULL) {
                int value = atoi(token);
                printf("Wartosc: %d\n", value);
            }
        } else if (strcmp(token, "backward") == 0) {
            printf("Wykryto komende: Backward\n");

            token = strtok_r(rest, delimiters, &rest);
            if (token != NULL) {
                int value = atoi(token);
                printf("Wartosc: %d\n", value);
            }
        } else if (strcmp(token, "right") == 0) {
            printf("Wykryto komende: Right\n");
        } else if (strcmp(token, "left") == 0) {
            printf("Wykryto komende: Left\n");
        }
    }
}

uint16_t czyZawieraLitere(const char* tablica, char litera);
uint16_t rozpoznajKomendy(char *komendy) {
	int lenght = strlen(komendy);
	sprintf(temp, "Lenght: %i", lenght);
	if(lenght % 3 == 0){
		int max_slow = lenght/3;
		UART_Println("Jest podzielna przez 3");
		sprintf(temp,"Max_slow : %i",max_slow);
		//char slowa[100][3];
		char slowa[20][3];
		char slowo1[3];
		UART_Println(temp);
		for(int i = 0; i < max_slow; i++){
			slowa[i][0] = komendy[i*3];
			slowa[i][1] = komendy[i*3 + 1];
			slowa[i][2] = komendy[i*3 + 2];
			char element[3];
			element[0] = slowa[i][0];
			element[1] = slowa[i][1];
			element[2] = slowa[i][2];
			UART_Println(element);
			if(czyZawieraLitere(element, 'f')){
				UART_Println("Foward");
				//return 1;
			}
			else if(czyZawieraLitere(element, 'b')){
				UART_Println("Backward");
				//return 2;
			}
			else if(czyZawieraLitere(element, 'r')){
				UART_Println("Right");
				//return 3;
			}
			else if(czyZawieraLitere(element, 'l')){
				UART_Println("Left");
				//return 4;
			}
			else{
				UART_Println("Nie zawiera litery");
				//return 0;
			}
			if(strcmp(element, "012") == 0){
				UART_Println("Dziala kurwa1");
			}
			else if(strcmp(element, "345") == 0){
				UART_Println("Dziala kurwa2");
			}
		}
//		char element = slowa[0][0];
//		UART_Println(&element);
		

	}
	else{
		UART_Println("Nie jest podzielna przez 3");
	}
}

uint16_t czyZawieraLitere(const char* tablica, char litera) {
    while (*tablica != '\0') {
        if (*tablica == litera) {
            return 1;
        }
        tablica++;
    }
    return 0;
}