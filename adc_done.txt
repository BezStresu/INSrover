


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "frdm_bsp.h"
#include "pit.h"
#include "ADC.h"
#include "lcd1602.h"

uint8_t result_adc0_ok = 0;
uint8_t result_light_ok = 0;
uint8_t result_temp_ok = 0;

uint16_t count_light = 0;
uint16_t count_temp = 0;

float	m = 162;		// /100
float u25 = 716;
float T;
float s25 = 25;

uint16_t t0;	// temporary
float	adc0_light;
float	adc0_temp;
float coeff = ((float)(((float)2.91) / 4095) );	// 2.91[V] to napiecie referencyjne przetwornika, 4095 to jego rozdzielczosc
// Do przemyslenia: Obsluge przerwania adc przeniesc do plików adc


void ADC0_IRQHandler()
{	
	t0 = ADC0->R[0];		// Odczyt danej i skasowanie flagi COCO
	if(!result_adc0_ok)					// Sprawdz, czy wynik skonsumowany przez petle glówna
	{
		if(result_temp_ok)
		{
			adc0_light = t0;				// Wyslij nowa dana do petli glównej
			count_light++;
		}
		else if(result_light_ok)
		{
			adc0_temp = t0;
			count_temp++;
		}
		result_adc0_ok = 1;
	}
	NVIC_ClearPendingIRQ(ADC0_IRQn);
}


int main(void) {
	// Wyswietlanie na LCD, przyda sie do testow
	char display[]={0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20};
	LCD1602_Init();		 // Inicjalizacja wyswietlacza LCD
	LCD1602_Backlight(TRUE);
	LCD1602_Print("---");		// Ekran kontrolny - nie zniknie, jesli dalsza czesc programu nie dziala
	PIT_Init();
	uint8_t	kal_error;
	kal_error = ADC_Init();		// Inicjalizacja i kalibracja przetwornika A/C
	if(kal_error)
	{
		// ToDo: Dodac funkcje ktora w przypadku wadliwej kalibracji robi to jeszcze kilka razy a w przypadku niepowodzenia informuje o tym
		while(1){							// Klaibracja sie nie powiodla
			LCD1602_Print("No calibration");
		}
	}
	
	ADC0->SC1[0] = ADC_SC1_AIEN_MASK | ADC_SC1_ADCH(0);		// Odblokowanie przerwania i wybranie kanalu nr 0
	result_light_ok = 1;			// wybranie pierwszego pomiaru
	
	
	while(1)
	{
		if(result_adc0_ok && result_light_ok && !result_temp_ok)
		{
			ADC0->SC1[0] = ADC_SC1_AIEN_MASK | ADC_SC1_ADCH(0);
			adc0_light = adc0_light*coeff* 500;		// Dostosowanie wyniku do zakresu napieciowego, wynik w luxach, obliczenia w notesie
			
			sprintf(display,"Lux=%.4fV",adc0_light);		// Wyswietlanie
			LCD1602_SetCursor(0,0);
			LCD1602_Print(display);
			LCD1602_SetCursor(0,1);
			LCD1602_PrintNum(count_light);
			
			result_adc0_ok = 0;
			result_light_ok = 0;
			result_temp_ok = 1;
		}
		else if(result_adc0_ok && result_temp_ok && !result_light_ok)
		{
			ADC0->SC1[0] = ADC_SC1_AIEN_MASK | ADC_SC1_ADCH(26);
			T = s25 - ((float)adc0_temp- u25)/m;		// temperatura w stopniach celcjusza
			sprintf(display,"T=%.4fV",T);
			LCD1602_SetCursor(0,0);
			LCD1602_Print(display);
			LCD1602_SetCursor(0,1);
			LCD1602_PrintNum(count_temp);
			
			
			result_adc0_ok = 0;
			result_temp_ok = 0;
			result_light_ok = 1;
		}
	}
	
}
